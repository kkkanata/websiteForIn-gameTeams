##### ページ概要

**共通UI/UX:**
*   すべてのページで、左サイドにマウスカーソルを移動するとサイドバーが表示され、他ページへアクセス可能です。

**ホームページ:**
*   実装形式: SSR
*   機能:
    1.  チーム概要、近日中のイベント情報を表示
    2.  チームの魅力が伝わるデザイン
    3.  イベント情報ボックス:
        *   独立したボックス内で近日中のイベント情報を表示
        *   開閉およびスクロール可能
        *   各イベント情報は詳細ページへのリンク
    4.  イベントがない場合の表示

**ログインページ:**
*   実装形式: SSR（ログイン後のリダイレクト先によってはCSRとの組み合わせも検討）
*   機能:
    1.  ページ右上のログインボタンから遷移
    2.  アカウントIDとパスワードで認証
    3.  accessTokenとrefreshTokenを使用した認証と更新
    4.  ログイン失敗時のエラーメッセージ表示
    5.  パスワードリセット機能の有無

**サインアップページ:**
*   実装形式: SSR
*   機能:
    1.  招待URLからのアクセスでのみアカウント作成が可能
    2.  アカウント名とパスワードを入力して作成
    3.  アカウント作成後に自動ログイン
    4.  招待URLが無効な場合のエラーメッセージ表示
    5.  入力値のバリデーション

**アカウント削除ページ:**
*   実装形式: SSR
*   機能:
    1.  ログインユーザーが自身のアカウントを削除可能（アカウント削除にはユーザーIDとパスワードが必要）
    2.  削除確認ダイアログの表示
    3.  削除後のリダイレクト先

**アカウント情報編集ページ:**
*   実装形式: SSR
*   機能:
    1.  ユーザーが名前やパスワードなどの情報を編集可能
    2.  編集内容は即時データベースに反映
    3.  入力値のバリデーション
    4.  変更完了メッセージの表示

**イベント一覧ページ:**
*   実装形式: SSR（データ変更時に自動取得機能は、SWRの`revalidateOnFocus`や`revalidateOnReconnect`などを利用して実現）
*   機能:
    1.  イベント情報のタイトルと日程をリスト形式で表示
    2.  各イベントは詳細ページへのリンク
    3.  ページネーションの有無

**イベント詳細ページ:**
*   実装形式: SSR
*   機能:
    1.  データベースからイベント情報を取得し表示
    2.  ログインユーザー以外も閲覧可能

**イベント作成ページ:**
*   実装形式: SSR
*   機能:
    1.  ログインユーザーがイベント名、日程、概要を入力して作成
    2.  イベント作成者情報も記録
    3.  イベント固有のイメージ画像をアップロード可能（または、YouTube/Twitterの画像/動画を埋め込み可能。oEmbedの利用を推奨）
    4.  入力値のバリデーション
    5.  アップロード可能なファイル形式、サイズ制限

**イベント情報編集ページ:**
*   実装形式: SSR
*   機能:
    1.  ログインユーザーが既存イベントの情報を編集可能
    2.  編集の競合を防ぐ排他制御を実装
    3.  排他制御が働いた場合のエラーメッセージ表示
    4.  入力値のバリデーション

**チャットページ:**
*   実装形式: CSR
*   機能:
    1.  WebSocketを使用したチャット
    2.  ホームページから遷移（非ログインユーザーには非表示）
    3.  複数スレッドでのチャット
    4.  スレッド一覧を表示し、直近の会話内容を確認可能
    5.  スタンプ機能の実装を検討
    6.  WebSocket接続エラー時の処理

**(動画 画像 共有ページ):**
*   実装形式: CSR（チャットページと機能が重複しているため、統合を検討。または目的を明確に区別する。）
*   機能: （チャットページと統合する場合は削除。区別する場合は具体的な機能と目的を記述。）

**チーム入団に際する注意ページ:**
*   実装形式: SSG
*   機能:
    1.  ログイン/非ログインユーザーともに閲覧可能
    2.  チーム入団に際する注意事項を表示

**管理者ページ:**
*   実装形式: SSR
*   機能:
    1.  Webサイト管理者のみアクセス可能
    2.  任意のアカウントの削除が可能
    3.  その他の機能（具体的に記述）
    4.  不正アクセス時の処理

**技術スタック:**
*   フロントエンド:
    *   Framework: Next.js 14 (App Router)
    *   Language: TypeScript
    *   Styling: Tailwind CSS
    *   Libraries: NextAuth.js (認証), Prisma (データベース), SWR
    *   Deployment: Vercel
    *   Linter: Eslint
    *   Formatter: Prettier
*   バックエンド:
    *   Framework: Next.js

**データモデル:**
*   User:
    *   id: string
    *   name: string
    *   email: string
    *   role: 'ADMIN' | 'MEMBER'
*   Event:
    *   id: string
    *   title: string
    *   description: string
    *   date: Date
    *   createdBy: string
    *   image: string (URL文字列を想定)
*   Message:
    *   id: string
    *   content: string
    *   senderId: string
    *   threadId: string
    *   createdAt: Date
*   Thread:
    *   id: string
    *   name: string
    *   createdById: string