## Webサイト要件定義、詳細設計、データベース設計

### 1. 概要

本ドキュメントは、構築するWebサイトの要件、詳細設計、およびデータベース設計を定義するものである。本Webサイトは、ユーザーがイベント情報/ブログ記事を投稿・閲覧し、ギャラリーとして写真や動画を共有できることを目的とする。

### 2. 機能要件

#### 2.1 ユーザー機能

*   ユーザー登録・ログイン機能
    *   メールアドレス、パスワードによる認証
*   イベント情報/ブログ記事の投稿・閲覧機能
    *   タイトル、本文、投稿日時、タグ、ラベル、サムネイル画像などの情報を含む
    *   イベント情報の場合は、開催日時、場所などの情報も含む
*   ギャラリー機能
    *   アルバム作成・管理機能
        *   アルバム名、説明、カバー画像などの情報を含む
    *   アルバムへの写真・動画追加機能
        *   外部サービス（Twitter, YouTubeなど）のURLを登録
        *   タイトル、説明などの情報を付加
    *   イベント/ブログ記事とギャラリーアルバムの関連付け機能
        *   動画/画像共有時に、既存のイベント/ブログを選択して関連付けが可能
        *   "イベント、ブログに関連付ける"ボタンをクリック
        *   イベント開始年月/ブログ登録年月で絞り込み
        *   絞り込み結果からイベント名/ブログ名を選択して関連付け
        *   イベント詳細ページから、関連付けられた動画/画像のみを表示するギャラリーページに遷移可能
        *   ギャラリーページからも、年月で絞り込み、イベント/ブログを選択して関連付けられた動画/画像を表示可能
        *   ギャラリーページのデフォルト表示は、動画/画像共有時に指定された種別ごとにアルバムとして表示
        *   ギャラリーページに"イベント/ブログに関連付けられた動画/画像を表示する"プルダウンメニューを設置
            *   "絞り込む": 年月で絞り込み
            *   "イベント/ブログ毎にアルバムで表示する": 現在動画/画像が存在するイベント/ブログ名と関連付けられた動画/画像の個数を表示。各イベント/ブログ名をクリックで、関連付けられた動画/画像を表示
*   ユーザープロファイル機能
    *   ユーザー情報の表示・編集

#### 2.2 管理者機能

*   ユーザー管理機能
*   投稿管理機能
*   その他、必要に応じて追加

### 3. 非機能要件

*   パフォーマンス
    *   高速なページ表示
    *   高トラフィックへの対応（現時点では大規模トラフィックは想定しない）
*   セキュリティ
    *   安全なパスワード管理（ハッシュ化）
    *   不正アクセス対策
*   ユーザビリティ
    *   直感的で使いやすいインターフェース
*   保守性
    *   容易なメンテナンスとアップデート
*   スケーラビリティ
    *   将来的な機能拡張やデータ増加に対応できること（現時点では大規模なスケーラビリティは要求しない）

### 4. データ要件

*   ユーザー情報
    *   ユーザーID、名前、パスワード（ハッシュ化）、その他必要な情報
*   イベント情報/ブログ記事
    *   投稿ID、投稿者ID、タイプ（イベント/ブログ）、タイトル、本文、投稿日時、サムネイル画像URL、イベント開催日時、場所など
*   ギャラリー情報
    *   アルバムID、作成者ID、アルバム名、説明、カバー画像URL
*   アルバムアイテム
    *   アイテムID、アルバムID、動画/画像URL、タイトル、説明
*   イベント/ブログ記事とアルバムの関連付け
    *   投稿ID、アルバムID

### 5. データベース設計 (SQLite)

#### 5.1 テーブル定義

*   `users`テーブル

    *   `id` (INTEGER PRIMARY KEY AUTOINCREMENT): ユーザーID
    *   `name` (TEXT UNIQUE): ユーザー名
    *   `password` (TEXT): パスワード（ハッシュ化して保存することを推奨）

*   `posts`テーブル

    *   `id` (INTEGER PRIMARY KEY AUTOINCREMENT): 投稿ID
    *   `user_id` (INTEGER, FOREIGN KEY referencing users.id): 投稿者ID
    *   `type` (TEXT): 投稿タイプ（"event"または"blog"）
    *   `title` (TEXT): タイトル
    *   `content` (TEXT): 本文
    *   `created_at` (TEXT): 投稿日時（ISO 8601形式の文字列で保存することを推奨）
    *   `thumbnail_url` (TEXT): サムネイル画像のURL
    *   `event_start_datetime` (TEXT): イベント開始日時
    *   `event_end_datetime` (TEXT): イベント終了日時
    *   `event_place` (TEXT): イベント開催場所

*   `albums`テーブル

    *   `id` (INTEGER PRIMARY KEY AUTOINCREMENT): アルバムID
    *   `user_id` (INTEGER, FOREIGN KEY referencing users.id): 作成者ID
    *   `name` (TEXT): アルバム名
    *   `description` (TEXT): 説明
    *   `cover_image_url` (TEXT): カバー画像のURL

*   `album_items`テーブル

    *   `id` (INTEGER PRIMARY KEY AUTOINCREMENT): アルバムアイテムID
    *   `album_id` (INTEGER, FOREIGN KEY referencing albums.id): 所属アルバムID
    *   `url` (TEXT): 動画/画像のURL
    *   `title` (TEXT): 動画/画像のタイトル
    *   `description` (TEXT): 動画/画像の説明

*   `posts_albums`テーブル (中間テーブル)

    *   `post_id` (INTEGER, FOREIGN KEY referencing posts.id): 投稿ID
    *   `album_id` (INTEGER, FOREIGN KEY referencing albums.id): アルバムID
    *   `PRIMARY KEY (post_id, album_id)`: 複合キー

#### 5.2 リレーションシップ

*   `users`テーブルと`posts`テーブル: 1対多 (1人のユーザーが複数の投稿を持つ)
*   `users`テーブルと`albums`テーブル: 1対多 (1人のユーザーが複数のアルバムを作成)
*   `albums`テーブルと`album_items`テーブル: 1対多 (1つのアルバムに複数のアイテムが含まれる)
*   `posts`テーブルと`albums`テーブル: 多対多 (中間テーブル`posts_albums`を使用)

#### 5.3 データ型

*   INTEGER: 整数
*   TEXT: 文字列
*   TEXT UNIQUE: 一意制約のある文字列

### 6. サイドバー要件

*   最新の投稿（イベント/ブログ記事）へのリンクを表示
*   カテゴリー（イベント/ブログの種類など）へのリンクを表示

### 7. その他

*   クラウドサービスへのデプロイを想定
*   現時点では詳細なデザインやUI/UXは未定
