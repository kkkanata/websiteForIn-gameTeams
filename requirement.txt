要件定義 {
※今回は学習とポートフォリオとしての開発なので継続的に発生するサーバ費用等は深くは追及しない
	主題: ゲーム内チームで使用するwebアプリの開発 {

		↓↓ページ概要↓↓

		アカウント作成ページ: {
			実装形式: 招待制、SSRで実装,
			機能等: 招待URLをユーザに渡し、そこからのみ、アカウント作成ページに遷移できる,
					アカウント名とパスワードを入力することでアカウントを作成できる,
					アカウント作成後、ログイン状態になり、一定期間ごとに再ログインすることで引き続き作成したアカウントで利用が可能。認証にはaccessTokenを使用し、期間内であればrefreshTokenでrefreshする,
		},
		アカウント削除ページ: {
			実装形式: SSRで実装,
			機能等: アカウントを保有したユーザが任意のタイミングでアカウントを削除することができる,
					アカウントを削除するにはuserIDとpasswordが必要,
					userIDまたはpasswordが分からない場合、管理者が対象のuser情報を削除することができる,
		},
		ログインページ: {
			実装形式: SSRで実装,
			機能等: ページ右上に表示されるログインボタンから遷移可能,
					アカウントIDとpasswordを入力することで認証し、ログインすることができる。ログイン後の認証にはaccessTokenを使用し、期間内であればrefreshTokenでrefreshする,
		},
		ホームページ:  {
			実装形式: SSRで実装(SEO対策面で有効。SSGではイベント情報などのデータ取得が不可能?)
			機能等: チームの概要、近日中のイベント情報を表示する,
					チームの概要、魅力などが伝わるデザインにする,
					イベント情報は開閉可能で、ボックス内でスクロールできる,
					イベント情報をクリックするとそれぞれのイベント情報画面に遷移する,
					右サイドにマウスカーソルが移動するとサイドバーが表示される。そこから別のページにアクセスできる,
		},
		チャットページ: {
			実装形式: webSocket(graphqlを使用する必要はなさそう?)。基本的にCSRで実装(SSRとのハイブリットも考える),
			機能等:  ホームページから遷移可能(ログインしていないユーザには表示されない)
					複数のスレッドを立てることができ、スレッド内で参加者同士のインタラクティブなチャットが可能(ログインユーザのみ),
					ページ遷移時にはスレッドの一覧が表示されそれぞれのスレッドにカーソルを合わせると参加者と直近の会話内容が確認できる(ページ遷移時のスレッドの取得数は制限するべき?),
					可能であれば、スタンプなどの機能も実装(スタンプ作成機能等も?),
		},
		イベント一覧ページ: {
			実装形式: SSRで実装(データベースが変更された場合に自動でデータを取得するような機構を取り入れるとなおよい),
			機能等: ID単位で登録されたイベント情報のタイトルと日程を取得し、それらをリンクとしてリスト形式で表示する,
		}
		イベント情報作成ページ: {
			実装形式: SSRで実装,
			機能等: ログインユーザーはホームページから遷移可能(ログインしていない場合、表示されないが、もし同じURLで遷移しても機能を使用できない),
					イベント名、イベント日程、イベント概要、イベント情報作成者、イベントイメージ(任意の画像)をそれぞれ登録し、イベント情報を作成することができる,
		},
		イベント情報編集ページ: {
			実装形式: SSRで実装(同時に変更者が複数存在する場合排他制御を取り入れる必要がありそう),
			機能等: 登録済みのイベント内容の変更をする,
		},
		それぞれのイベント情報ページ: {
			実装形式: SSRで実装,
			機能等: ID単位で登録されたイベント情報をデータベースから取得し、UI要素に挿入することでイベント情報を表示,
					ログインユーザ以外も閲覧可能,
		},
		チーム入団に際する注意ページ: {
			実装形式: 変更が少なくインタラクティブ性も無いページなのでSSG,
			機能等: チームに入団する際の注意事項がまとめられている,
		},
	技術スタック: {
		フロントエンド: {
			framework: Next.js,
			library: chakraUI,axios,SWR(必要に応じてanimationlibrary等を追加),
			linter: Eslint,
			formatter: Prettier,
		},
		バックエンド: {
			(機能が多くセキュリティの担保が比較的簡単な反面、リアルタイム通信については比較的不向きなためnode.js、golang等を使用する事も検討(利用者100人程度と考える場合、機能的にはdjangoでよさそう、将来的な目標のための学習を考えるならばnode.jsを使うべきかもしれない)),
			(今回は初めての個人開発なのでスピードと堅実性を重視しでdjangoを利用しようと思う),
			framework: django,
			library: {
				Django Channels:
					チャット機能のリアルタイム性を担保するためにDjango Channelsを利用します。これにより、WebSocketを通じた双方向通信が可能になり、チャットや通知のリアルタイム性が向上します。
					ただし、Redisなどの外部依存が必要なので注意が必要です。
				Django Allauth:
					招待制のアカウント作成機能に適したライブラリで、OAuthプロバイダー（GoogleやFacebook）などとの連携やメールによる招待認証が簡単に実装できます。
				Django SimpleJWT:
					トークンベースの認証に適したライブラリで、サイレントリフレッシュ機能も備えており、セキュリティの高いトークン認証を行えます。フロントエンドのAxiosやAuth0 SDKと連携して使うことができます。
				Celery + Redis:
					非同期タスク処理のためにCeleryを使用し、Redisをバックエンドに設定すると、メールの送信（アカウント招待など）や通知機能の処理が効率化されます。
		},
		データベース: {
			
		}
	},
		


	確認するべきこと: {
		UIについて: 楽しい雰囲気なデザイン、美しさを強調するデザイン、使用感重視のデザイン、等
		UIツール: nex.jsで使用できるUIツールについて(Material UI等),
		セキュリティについて: それぞれの技術スタックにおけるセキュリティについて必ず一回は調べる,
		dockerを使用する利点、dockerとgithubとの連携、dockerHubの利用など (dockerを使用する事が必要がないのならばそれも可),
	},
	ポートフォリオとしての開発で気を付けるべきこと: {
		開発の記録をgithubに残すこと,
		dockerを使用して、開発環境、本番環境などに分けて開発する事,
		余裕があれば部分的にテスト駆動開発を行う事,
	},
},