要件定義 {
※今回は学習とポートフォリオとしての開発なので継続的に発生するサーバ費用等は深くは追及しない
	主題: ゲーム内チームで使用するwebアプリの開発 {

		↓↓ページ概要↓↓

		アカウント作成ページ: {
			実装形式: 招待制で実装,
			機能等: 招待URLをユーザに渡し、そこからのみ、アカウント作成ページに遷移できる,
					アカウント名とパスワードを入力することでアカウントを作成できる,
					アカウント作成後、ログイン状態になり、一定期間ごとに
		}
		ログインページ: {
			実装形式:
			機能等:
		}
		ホームページ:  {
			実装形式: SSRで実装(SEO対策面で有効。SSGではイベント情報などのデータ取得が不可能?)
			機能等: チームの概要、近日中のイベント情報を表示する,
					チームの概要、魅力などが伝わるデザインにする,
					イベント情報は開閉可能で、ボックス内でスクロールできる,
					イベント情報をクリックするとそれぞれのイベント情報画面に遷移する,
					右サイドにマウスカーソルが移動するとサイドバーが表示される。そこから別のページにアクセスできる,
		},
		チャットページ: {
			実装形式: webSocket(graphqlを使用する必要はなさそう?)
			機能等:  ホームページから遷移可能(ログインしていないユーザには表示されない)
					複数のスレッドを立てることができ、スレッド内で参加者同士のインタラクティブなチャットが可能(ログインユーザのみ),
					ページ遷移時にはスレッドの一覧が表示されそれぞれのスレッドにカーソルを合わせると参加者と直近の会話内容が確認できる(ページ遷移時のスレッドの取得数は制限するべき?),
					可能であれば、スタンプなどの機能も実装(スタンプ作成機能等も?),
		},
		イベント情報作成ページ: {
			実装形式: 
			機能等: イベント名、イベント日程、イベント概要、イベント情報作成者、イベントイメージ(任意の画像)をそれぞれ登録し、イベント情報を作成することができる,
		},
		イベント情報編集ページ {

		},
		それぞれのイベント情報ページ {

		},
		


	},
	確認するべきこと: {
		UIについて: 楽しい雰囲気なデザイン、美しさを強調するデザイン、使用感重視のデザイン、等
		UIツール: nex.jsで使用できるUIツールについて(Material UI等),
		セキュリティについて: それぞれの技術スタックにおけるセキュリティについて必ず一回は調べる,
		dockerを使用する利点、dockerとgithubとの連携、dockerHubの利用など (dockerを使用する事が必要がないのならばそれも可),
	},
}