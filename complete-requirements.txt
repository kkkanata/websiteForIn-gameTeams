# Webサイト要件定義・詳細設計書（完全版）

## 1. システム概要
本Webサイトは、ユーザーがイベント情報/ブログ記事を投稿・閲覧し、ギャラリーとして写真や動画を共有できるプラットフォーム。個人運営のプロダクトとして、低コストでの運用を実現する。

### 1.1 システムスケール
- 月間アクティブユーザー：200人以内
- 1日あたりの投稿数：100回以内
- メディア管理：外部サービス（YouTube, X(旧Twitter)）の埋め込みのみ

### 1.2 技術スタック
- フロントエンド：Next.js 14 (App Router)
- スタイリング：TailwindCSS, shadcn/ui
- 状態管理：React Hooks (useContext, useReducer)
- バックエンド：Next.js API Routes
- データベース：SQLite (Prisma ORM)
- デプロイ：Vercel (Hobbyプラン)

## 2. 機能要件

### 2.1 認証・認可システム
#### ユーザー登録
- 招待コードによる登録のみ
- ユーザー名とパスワードでアカウント作成
- メール認証なし

#### 認証方式
- HTTPOnly Cookieでのトークン管理
- アクセストークン（有効期限1時間）
- リフレッシュトークン（有効期限30日）

#### 権限レベル
1. スーパー管理者
   - すべての操作が可能
   - 他の管理者の権限管理
   - システム全体の設定管理

2. 一般管理者
   - コンテンツの編集・削除
   - ユーザー管理（削除を除く）
   - 関連付けの管理

3. 一般ユーザー
   - 自身のコンテンツの作成・編集・削除
   - 自身の作成したコンテンツへの関連付け

### 2.2 コンテンツ管理
#### イベント/ブログ投稿
- タイトル、本文、投稿日時の管理
- タグ付け機能
- コメント機能
  - 投稿者と管理者による削除権限
  - 返信機能あり
  - 通知機能なし

#### ギャラリー機能
- アルバム管理
  - アルバム名（最大100文字）
  - 優先度設定（0-10、管理者のみ設定可能）
  - 優先度が同じ場合は作成順
- メディアアイテム管理
  - YouTube/X(Twitter)の埋め込みのみ
  - タイトルと説明の自動取得（編集可能）
  - イベント/ブログとの関連付け

### 2.3 表示機能
#### 共通UI/UX
- 左サイドバー
  - マウスオーバーで表示
  - 他ページへのナビゲーション

#### ホームページ
- チーム概要とイメージの表示
- イベント情報/ブログ一覧
  - 独立したボックスで表示
  - 開閉可能
  - スクロール可能
  - 1年以内の情報を表示

#### ギャラリー表示
- 表示形式
  1. グリッド表示（デフォルト）
     - YouTube: 320x180px (mqdefault.jpg)
     - X(Twitter): 400px幅 (medium)
  2. モーダル表示
     - YouTube: 480x360px (hqdefault.jpg)
     - X(Twitter): オリジナルサイズ (large)
     - Lazy Loading適用
     - 前後の動画/画像への移動機能
     - 元の外部サービスへの直接リンク

- フィルタリング・ソート機能
  - タグによるフィルタリング
  - 日付範囲での絞り込み（Range Slider）
  - 作成者でのフィルタリング
  - 投稿日時での並び替え

- ページネーション
  - ページ番号方式
  - 表示倍率による表示件数の動的調整

## 3. 非機能要件

### 3.1 パフォーマンス最適化
- クライアントサイドでのキャッシュ活用
- LocalStorageを使用した永続化
- 手動更新方式（自動更新なし）
- 必要最小限のAPI呼び出し

### 3.2 セキュリティ要件
- パスワードのハッシュ化保存
- HTTPOnly CookieでのJWTトークン管理
- CSRF対策
- XSS対策
- SQLインジェクション対策

### 3.3 エラーハンドリング
- ファイルアップロード失敗時
- データベース接続エラー時
- 外部サービス連携エラー時
- 無効なURL入力時
- トークン期限切れ時

## 4. データベース設計

### 4.1 テーブル構造
```sql
-- ユーザー管理
CREATE TABLE users (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    username TEXT UNIQUE NOT NULL,
    password TEXT NOT NULL,
    role TEXT NOT NULL CHECK (role IN ('super_admin', 'admin', 'user')),
    is_active INTEGER NOT NULL DEFAULT 1,
    created_at TEXT NOT NULL,
    last_login_at TEXT
);

-- 投稿（イベント/ブログ）
CREATE TABLE posts (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER NOT NULL,
    type TEXT NOT NULL CHECK (type IN ('event', 'blog')),
    title TEXT NOT NULL,
    content TEXT NOT NULL,
    created_at TEXT NOT NULL,
    event_start_datetime TEXT,
    event_end_datetime TEXT,
    event_place TEXT,
    FOREIGN KEY (user_id) REFERENCES users(id)
);

-- 投稿タグ
CREATE TABLE post_tags (
    post_id INTEGER NOT NULL,
    tag TEXT NOT NULL,
    PRIMARY KEY (post_id, tag),
    FOREIGN KEY (post_id) REFERENCES posts(id)
);

-- アルバム
CREATE TABLE albums (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER NOT NULL,
    name TEXT NOT NULL CHECK (length(name) <= 100),
    created_at TEXT NOT NULL,
    thumbnail_url TEXT,
    priority INTEGER NOT NULL DEFAULT 0 CHECK (priority BETWEEN 0 AND 10),
    FOREIGN KEY (user_id) REFERENCES users(id)
);

-- メディアアイテム（YouTube/Twitter埋め込み）
CREATE TABLE media_items (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    album_id INTEGER NOT NULL,
    service_type TEXT NOT NULL CHECK (service_type IN ('youtube', 'twitter')),
    external_id TEXT NOT NULL,
    embed_url TEXT NOT NULL,
    title TEXT NOT NULL,
    description TEXT,
    thumbnail_url TEXT NOT NULL,
    created_at TEXT NOT NULL,
    display_order INTEGER NOT NULL DEFAULT 0,
    FOREIGN KEY (album_id) REFERENCES albums(id)
);

-- 投稿とメディアの関連付け
CREATE TABLE posts_media (
    post_id INTEGER NOT NULL,
    media_id INTEGER NOT NULL,
    PRIMARY KEY (post_id, media_id),
    FOREIGN KEY (post_id) REFERENCES posts(id),
    FOREIGN KEY (media_id) REFERENCES media_items(id)
);

-- コメント
CREATE TABLE comments (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    post_id INTEGER NOT NULL,
    user_id INTEGER NOT NULL,
    parent_comment_id INTEGER,
    content TEXT NOT NULL,
    created_at TEXT NOT NULL,
    FOREIGN KEY (post_id) REFERENCES posts(id),
    FOREIGN KEY (user_id) REFERENCES users(id),
    FOREIGN KEY (parent_comment_id) REFERENCES comments(id)
);

-- 招待コード
CREATE TABLE invite_codes (
    code TEXT PRIMARY KEY,
    created_by INTEGER NOT NULL,
    expires_at TEXT NOT NULL,
    is_used INTEGER NOT NULL DEFAULT 0,
    used_by INTEGER,
    created_at TEXT NOT NULL,
    FOREIGN KEY (created_by) REFERENCES users(id),
    FOREIGN KEY (used_by) REFERENCES users(id)
);
```

## 5. ルーティング構造

### 5.1 ページルーティング
```
/                     # ホームページ
├── auth/
│   ├── login        # ログインページ
│   └── signup       # サインアップページ
├── events/
│   ├── [id]         # イベント詳細ページ
│   ├── create       # イベント作成ページ
│   └── edit/[id]    # イベント編集ページ
├── blog/
│   ├── [id]         # ブログ詳細ページ
│   ├── create       # ブログ作成ページ
│   └── edit/[id]    # ブログ編集ページ
├── gallery/
│   ├── albums       # アルバム一覧
│   └── [id]         # アルバム詳細
├── account/
│   ├── profile      # アカウント情報編集
│   └── delete       # アカウント削除
├── chat             # チャットページ
├── admin            # 管理者ページ
└── guide            # チーム入団注意ページ
```

### 5.2 APIエンドポイント
```
/api
├── auth/
│   ├── login
│   ├── logout
│   ├── refresh
│   └── invite
├── users/
│   ├── [id]
│   └── me
├── posts/
│   ├── [id]
│   └── comments
├── media/
│   ├── [id]
│   └── embed
└── albums/
    └── [id]
```

## 6. コンポーネント構造

### 6.1 共通コンポーネント
```
/components
├── common/
│   ├── Layout        # 共通レイアウト（サイドバー含む）
│   ├── Header        # ヘッダー
│   ├── Sidebar       # サイドバー
│   └── ErrorBoundary # エラー境界
├── auth/             # 認証関連
├── media/            # メディア表示関連
├── posts/            # 投稿関連
└── ui/               # 汎用UIコンポーネント
```

### 6.2 メディアコンポーネント
```
/components/media
├── Gallery/
│   ├── GalleryGrid    # グリッド表示
│   ├── MediaModal     # モーダル表示
│   └── MediaCard      # メディアカード
├── Embed/
│   ├── YouTubeEmbed   # YouTube埋め込み
│   └── TwitterEmbed   # Twitter埋め込み
└── Controls/
    ├── FilterBar      # フィルター
    └── SortControls   # ソートコントロール
```
